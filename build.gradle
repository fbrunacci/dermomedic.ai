apply plugin: 'kotlin'
apply plugin: 'maven'

group = 'ai.dermomedic'

sourceCompatibility = 1.8

buildscript {
    ext {
        dl4j_version = "1.0.0-beta7"
        dl4j_backend = "cuda-10.1"
        kotlin_version = "1.3.72"
        junit_version = "4.12"
        opencv_version = "4.0.1-1.4.4"
        ktor_version = "1.4.1"
    }
    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://jitpack.io' }
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.datavec:datavec-data-image:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-${dl4j_backend}:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-core:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-common:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-datasets:${dl4j_version}"
    implementation "org.deeplearning4j:rl4j-core:${dl4j_version}"
    implementation "org.deeplearning4j:rl4j-gym:${dl4j_version}"
    implementation "org.deeplearning4j:rl4j-ale:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-nn:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-nlp:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-ui:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-modelimport:${dl4j_version}"
    implementation "org.deeplearning4j:deeplearning4j-zoo:${dl4j_version}"
    implementation "org.nd4j:nd4j-api:${dl4j_version}"
    implementation "org.nd4j:nd4j-tensorflow:${dl4j_version}"
    implementation "org.nd4j:nd4j-${dl4j_backend}:${dl4j_version}"
    implementation "org.nd4j:nd4j-${dl4j_backend}-platform:${dl4j_version}"
    implementation "org.slf4j:slf4j-simple:1.7.25"
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.bytedeco:ale-platform:0.6.0-1.5.2"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-json:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-client-serialization:$ktor_version"

    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.2"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "org.ehcache:ehcache:3.9.0"

    implementation "de.mpicbg.scicomp:krangl:0.11" exclude group: "org.jetbrains.kotlin"
    implementation "org.bytedeco.javacpp-presets:opencv:${opencv_version}"
    implementation "com.sksamuel.hoplite:hoplite-core:1.3.6"
    implementation "com.sksamuel.hoplite:hoplite-yaml:1.3.6"
    testCompile "junit:junit:${junit_version}"
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

sourceSets {
    main {
        /*
        Kotlin examples do not use java sources, so let's exclude them all
         */
        java {
            srcDir "src/main/java"
            exclude "**"
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

